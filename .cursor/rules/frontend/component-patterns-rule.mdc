---
description:
globs:
alwaysApply: true
---

# Component Architecture Patterns (Orchestrator)

This rule orchestrates component architecture patterns by referencing specialized rules for different aspects of component development.

## Specialized Pattern References

### UI and Styling Patterns
- **See: `ui-styling-patterns-rule.mdc`** for comprehensive UI styling guidelines
- **See: `ui-styling-patterns-rule.mdc`** for shadcn/ui integration and responsive design
- **See: `ui-styling-patterns-rule.mdc`** for touch interactions and accessibility patterns

### React Server Components Patterns
- **See: `rsc-component-patterns-rule.mdc`** for Server Components architecture
- **See: `rsc-component-patterns-rule.mdc`** for data fetching and Server Actions
- **See: `rsc-component-patterns-rule.mdc`** for error boundaries and loading states

---

## Quick Reference Architecture Guidelines

### Component Hierarchy (Server Components First)
```
Page (Server Component)
├── Layout (Server Component)
├── Data Fetching (Server Component)
├── Static Content (Server Component)
└── Interactive Features (Client Component in Suspense)
```

### File Organization Pattern
```
components/
├── ui/                     # shadcn/ui components
├── layout/                 # Layout components (Server)
├── features/               # Feature-specific components
│   ├── [feature]/
│   │   ├── server/        # Server Components
│   │   ├── client/        # Client Components
│   │   └── index.ts       # Barrel exports
└── common/                 # Shared utilities
```

### Component Decision Tree
```
Need interactivity?
├── No  → Server Component (default)
└── Yes → Client Component
    ├── Wrap in Suspense
    ├── Add error boundary
    └── Minimize client bundle
```

## Integration Checklist

When creating components, ensure:

### ✅ Architecture Compliance
- [ ] Default to Server Components
- [ ] Use `'use client'` only when necessary
- [ ] Wrap client components in Suspense
- [ ] Implement proper error boundaries

### ✅ UI/Styling Standards
- [ ] Use shadcn/ui + Radix primitives
- [ ] Apply Tailwind with `cn()` function
- [ ] Follow mobile-first responsive design
- [ ] Implement touch-friendly interactions

### ✅ Performance Optimization
- [ ] Minimize client-side JavaScript
- [ ] Use proper loading states
- [ ] Implement error handling
- [ ] Optimize for Core Web Vitals

### ✅ Accessibility Requirements
- [ ] Proper ARIA attributes
- [ ] Keyboard navigation support
- [ ] Screen reader compatibility
- [ ] Color contrast compliance

## Common Patterns Summary

### Server Component with Client Interaction
```ts
// Server Component (default)
async function ProductPage({ id }: { id: string }) {
  const product = await getProduct(id)

  return (
    <div>
      <ProductDetails product={product} />
      <Suspense fallback={<InteractionSkeleton />}>
        <ProductInteractions productId={id} />
      </Suspense>
    </div>
  )
}

// Client Component (when needed)
'use client'
function ProductInteractions({ productId }: { productId: string }) {
  const [liked, setLiked] = useState(false)

  return (
    <Button onClick={() => setLiked(!liked)}>
      {liked ? '❤️' : '🤍'} Like
    </Button>
  )
}
```

### Form with Server Action
```ts
// Server Action
async function createProduct(formData: FormData) {
  'use server'
  // Validation and database logic
  revalidatePath('/products')
}

// Form Component (Server)
function ProductForm() {
  return (
    <form action={createProduct}>
      <Input name="name" required />
      <Button type="submit">Create</Button>
    </form>
  )
}
```

### Responsive Layout with Touch Support
```ts
function ResponsiveCard({ children }: { children: React.ReactNode }) {
  return (
    <Card className={cn(
      // Mobile-first with touch optimization
      "p-4 touch-manipulation",
      // Responsive scaling
      "md:p-6 lg:p-8",
      // Touch-friendly interactions
      "active:scale-95 transition-transform"
    )}>
      {children}
    </Card>
  )
}
```

## Error Handling Pattern
```ts
// Layout-level error boundary
function ComponentErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundary
      fallback={({ error, reset }) => (
        <div className="p-6 text-center">
          <h2>Something went wrong</h2>
          <Button onClick={reset}>Try again</Button>
        </div>
      )}
    >
      {children}
    </ErrorBoundary>
  )
}
```

## Testing Strategy
```ts
// Server Component testing
describe('ProductList', () => {
  it('renders products correctly', async () => {
    const ProductListComponent = await ProductList()
    render(ProductListComponent)
    expect(screen.getByText('Product 1')).toBeInTheDocument()
  })
})

// Client Component testing
describe('InteractiveButton', () => {
  it('handles interactions', () => {
    render(<InteractiveButton />)
    fireEvent.click(screen.getByRole('button'))
    expect(mockHandler).toHaveBeenCalled()
  })
})
```

---

## Integration with Other Rules

This orchestrator works with:
- **Frontend Standards**: Core architecture principles
- **TypeScript Rules**: Type safety and validation
- **Performance Rules**: Optimization strategies
- **Animation Rules**: Motion and interaction patterns

For detailed implementation patterns, always reference the specialized rule files listed above.
