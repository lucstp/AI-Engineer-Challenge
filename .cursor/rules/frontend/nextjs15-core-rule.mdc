---
description: # Next.js 15 stable features, async APIs, and caching changes
globs: ["**/app/**/*.{ts,tsx}", "**/pages/**/*.{ts,tsx}", "next.config.{ts,js}"]
alwaysApply: true
---

# Next.js 15 Core Features (Stable Oct 21, 2024)

## Breaking Changes - Async Request APIs

All request APIs are now async in Next.js 15:

```ts
// ✅ Next.js 15 - All async
export default async function Page({ params, searchParams }: {
  params: Promise<{ id: string }>
  searchParams: Promise<{ query?: string }>
}) {
  const resolvedParams = await params
  const resolvedSearchParams = await searchParams
  const cookieStore = await cookies()
  const headersList = await headers()
  const { isEnabled } = await draftMode()

  return <div>Page content</div>
}

// ✅ Server Actions - async APIs
export async function updateUser() {
  'use server'

  const cookieStore = await cookies()
  const headersList = await headers()
  // Server logic
}

// ❌ Old pattern (Next.js 14)
export default function Page({ params, searchParams }) {
  const cookieStore = cookies() // No longer works
}
```

## Caching Changes (Breaking)

Default caching behavior has changed significantly:

```ts
// ✅ Next.js 15 - Explicit caching when needed
const response = await fetch('/api/data', {
  cache: 'force-cache' // Opt-in to caching
})

// ✅ Route Handlers - no default caching
export async function GET() {
  // No longer cached by default
  return Response.json({ data: 'hello' })
}

// ✅ Explicit caching configuration
export async function GET() {
  return Response.json({ data: 'cached' }, {
    headers: {
      'Cache-Control': 'max-age=3600'
    }
  })
}

// ❌ Old assumption (Next.js 14)
const response = await fetch('/api/data') // Was cached by default
```

## Development Performance

### Turbopack Dev (Stable)
Turbopack is now stable for development:

```bash
# Use Turbopack for faster development
pnpm dev --turbo

# Or configure in next.config.ts
export default {
  experimental: {
    turbo: {
      // Turbopack configuration
    }
  }
}
```

### React Compiler (Experimental)
Automatic optimizations without manual memoization:

```ts
// next.config.ts
const nextConfig = {
  experimental: {
    reactCompiler: true,
    // Optional: Configure compiler options
    reactCompiler: {
      compilationMode: 'annotation' // or 'all'
    }
  }
}

export default nextConfig
```

## New APIs and Features

### after() API (Stable in 15.1)
Execute code after response streaming:

```ts
import { after } from 'next/server'

export default function Page() {
  after(async () => {
    // Runs after response is sent to user
    await trackPageView()
    await logAnalytics()
    await cleanupResources()
  })

  return <div>Page content</div>
}

// Works in Server Actions too
export async function createPost(formData: FormData) {
  'use server'

  const post = await savePost(formData)

  after(async () => {
    await sendNotification(post.id)
    await updateSearchIndex(post)
  })

  revalidatePath('/posts')
}
```

### Authorization APIs (Experimental in 15.1)
Built-in authorization error handling:

```ts
import { forbidden, unauthorized } from 'next/navigation'

// Trigger 403 with custom UI
export async function AdminPage() {
  const user = await getCurrentUser()

  if (!user.isAdmin) {
    forbidden() // Uses forbidden.tsx for UI
  }

  return <AdminDashboard />
}

// Trigger 401 with custom UI
export async function ProtectedRoute() {
  const session = await getSession()

  if (!session) {
    unauthorized() // Uses unauthorized.tsx for UI
  }

  return <UserDashboard />
}

// Enable in next.config.ts
export default {
  experimental: {
    authorizationEdge: true
  }
}
```

## Configuration and TypeScript

### TypeScript Support for next.config
Native TypeScript configuration:

```ts
// next.config.ts (not .js)
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  typescript: {
    tsconfigPath: './tsconfig.json'
  },
  experimental: {
    turbo: {},
    reactCompiler: true
  }
}

export default nextConfig
```

### ESLint 9 Support
Full ESLint 9 compatibility with backward support:

```json
// eslint.config.js (ESLint 9 flat config)
export default [
  {
    files: ['**/*.{ts,tsx}'],
    extends: ['next/core-web-vitals'],
    rules: {
      // Custom rules
    }
  }
]

// .eslintrc.json (ESLint 8 - still supported)
{
  "extends": ["next/core-web-vitals"]
}
```

## Performance and Build Optimization

### Static Indicator
Better understanding of static vs dynamic behavior:

```ts
// Automatic static indicator in development
export default function Page() {
  // Shows static/dynamic status in dev toolbar
  return <div>Page content</div>
}
```

### Bundling External Packages (Stable)
Better control over package bundling:

```ts
// next.config.ts
export default {
  bundlePagesRouterDependencies: true,
  experimental: {
    bundlePagesExternals: true,
    optimizePackageImports: ['lodash', 'date-fns']
  }
}
```
## Migration Guidelines

### Upgrading from Next.js 14
1. Update async API patterns
2. Review caching assumptions
3. Enable Turbopack for development
4. Consider React Compiler for optimization
5. Update ESLint configuration if needed

```bash
# Automated upgrade
npx @next/codemod@canary upgrade latest

# Manual upgrade
pnpm add next@latest react@latest react-dom@latest
```
