---
description: React Server Components patterns, server-side rendering, and data fetching
globs:
alwaysApply: false
---

# React Server Components Patterns

## Server Components First Architecture

### Default to Server Components
- **Minimize `use client` usage** - Default to Server Components for data fetching and static content
- **Use client components only when necessary** - For interactivity, browser APIs, or state management
- **Wrap client components in Suspense** with appropriate fallbacks
- **Implement error boundaries** at layout/page level

```ts
// ✅ Server Component for data fetching (default)
async function ProductList() {
  const products = await getProducts() // Server-side data fetching

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {products.map((product) => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  )
}

// ✅ Client Component only when needed
'use client'
import { useState } from 'react'

function InteractiveProductCard({ product }: { product: Product }) {
  const [isLiked, setIsLiked] = useState(false)

  return (
    <Card>
      <CardContent>
        <h3>{product.name}</h3>
        <Button
          onClick={() => setIsLiked(!isLiked)}
          variant={isLiked ? "default" : "outline"}
        >
          {isLiked ? "❤️ Liked" : "🤍 Like"}
        </Button>
      </CardContent>
    </Card>
  )
}

// ✅ Compose Server and Client Components
function ProductPage({ productId }: { productId: string }) {
  return (
    <div>
      {/* Server Component for static content */}
      <ProductDetails productId={productId} />

      {/* Client Component wrapped in Suspense */}
      <Suspense fallback={<div>Loading interactions...</div>}>
        <InteractiveProductCard productId={productId} />
      </Suspense>
    </div>
  )
}
```

## Data Fetching Patterns

### Server-Side Data Fetching
```ts
// ✅ Async Server Components with proper error handling
async function UserProfile({ userId }: { userId: string }) {
  try {
    const user = await getUserById(userId)

    if (!user) {
      return <div>User not found</div>
    }

    return (
      <Card>
        <CardHeader>
          <CardTitle>{user.name}</CardTitle>
          <p className="text-muted-foreground">{user.email}</p>
        </CardHeader>
        <CardContent>
          <p>{user.bio}</p>
        </CardContent>
      </Card>
    )
  } catch (error) {
    return <div>Error loading user profile</div>
  }
}

// ✅ Parallel data fetching
async function Dashboard() {
  // Fetch data in parallel
  const [user, stats, notifications] = await Promise.all([
    getCurrentUser(),
    getUserStats(),
    getNotifications()
  ])

  return (
    <div className="space-y-6">
      <UserHeader user={user} />
      <StatsGrid stats={stats} />
      <NotificationsList notifications={notifications} />
    </div>
  )
}

// ✅ Streaming with Suspense boundaries
function DashboardPage() {
  return (
    <div className="space-y-6">
      <Suspense fallback={<UserHeaderSkeleton />}>
        <UserHeader />
      </Suspense>

      <Suspense fallback={<StatsGridSkeleton />}>
        <StatsGrid />
      </Suspense>

      <Suspense fallback={<NotificationsListSkeleton />}>
        <NotificationsList />
      </Suspense>
    </div>
  )
}
```

### Server Actions Integration
```ts
// ✅ Server Actions with form handling
import { revalidatePath } from 'next/cache'

async function createPost(formData: FormData) {
  'use server'

  const title = formData.get('title') as string
  const content = formData.get('content') as string

  // Validate data
  if (!title || !content) {
    throw new Error('Title and content are required')
  }

  // Create post
  await createPostInDB({ title, content })

  // Revalidate the posts page
  revalidatePath('/posts')
}

function CreatePostForm() {
  return (
    <form action={createPost} className="space-y-4">
      <div>
        <Label htmlFor="title">Title</Label>
        <Input id="title" name="title" required />
      </div>
      <div>
        <Label htmlFor="content">Content</Label>
        <Textarea id="content" name="content" required />
      </div>
      <Button type="submit">Create Post</Button>
    </form>
  )
}
```

## Error Boundaries and Loading States

### Error Boundary Implementation
```ts
// ✅ Error boundary for layout-level error handling
'use client'
import { useEffect } from 'react'

function ErrorBoundary({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log error to monitoring service
    console.error('Error boundary caught:', error)
  }, [error])

  return (
    <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
      <h2 className="text-2xl font-bold">Something went wrong!</h2>
      <p className="text-muted-foreground text-center max-w-md">
        We encountered an error while loading this page. Please try again.
      </p>
      <Button onClick={reset}>Try again</Button>
    </div>
  )
}

// ✅ Loading UI components
function LoadingSkeleton() {
  return (
    <div className="space-y-4">
      <div className="h-8 bg-gray-200 rounded animate-pulse" />
      <div className="h-4 bg-gray-200 rounded animate-pulse w-3/4" />
      <div className="h-4 bg-gray-200 rounded animate-pulse w-1/2" />
    </div>
  )
}

function ProductCardSkeleton() {
  return (
    <Card>
      <CardHeader>
        <div className="h-6 bg-gray-200 rounded animate-pulse" />
        <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3" />
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="h-4 bg-gray-200 rounded animate-pulse" />
          <div className="h-4 bg-gray-200 rounded animate-pulse w-4/5" />
          <div className="h-10 bg-gray-200 rounded animate-pulse mt-4" />
        </div>
      </CardContent>
    </Card>
  )
}
```

## Component Composition Patterns

### Higher-Order Component Patterns
```ts
// ✅ Wrapper components for common functionality
function WithErrorBoundary<T extends object>({
  children,
  fallback
}: {
  children: React.ReactNode
  fallback?: React.ComponentType<{ error: Error; reset: () => void }>
}) {
  return (
    <ErrorBoundary fallback={fallback}>
      {children}
    </ErrorBoundary>
  )
}

// ✅ Layout composition
function PageLayout({
  children,
  sidebar,
  header
}: {
  children: React.ReactNode
  sidebar?: React.ReactNode
  header?: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-background">
      {header && (
        <header className="border-b">
          {header}
        </header>
      )}
      <div className="flex">
        {sidebar && (
          <aside className="w-64 border-r p-6">
            {sidebar}
          </aside>
        )}
        <main className="flex-1 p-6">
          {children}
        </main>
      </div>
    </div>
  )
}

// ✅ Usage with composition
function DashboardLayout({ children }: { children: React.ReactNode }) {
  return (
    <PageLayout
      header={<DashboardHeader />}
      sidebar={<DashboardSidebar />}
    >
      <WithErrorBoundary>
        {children}
      </WithErrorBoundary>
    </PageLayout>
  )
}
```

## File Organization Patterns

### Component File Structure
```
components/
├── ui/                     # shadcn/ui components
│   ├── button.tsx
│   ├── card.tsx
│   └── input.tsx
├── layout/                 # Layout components
│   ├── header.tsx
│   ├── sidebar.tsx
│   └── footer.tsx
├── features/               # Feature-specific components
│   ├── auth/
│   │   ├── login-form.tsx
│   │   └── signup-form.tsx
│   └── dashboard/
│       ├── stats-grid.tsx
│       └── user-profile.tsx
└── common/                 # Shared components
    ├── loading-skeleton.tsx
    └── error-boundary.tsx
```

### Barrel Exports Pattern
- **See: `frontend-standard-rule.mdc`** for comprehensive barrel export guidelines including internal vs external usage patterns
- **Quick Rule**: Use direct imports within features, barrel imports between features

```ts
// ✅ Internal import (within same feature)
import { useChat } from '../hooks/use-chat'
import type { ChatState } from '../types/chat'

// ✅ External import (between features)
import { ChatProvider, useChatContext } from '@/features/chat'

// ✅ Barrel export file structure
// features/chat/index.ts
export { ChatProvider, useChatContext } from './context/chat-context'
export { useChat } from './hooks/use-chat'
export type { Message, ChatState, ChatContextType } from './types/chat'

## Custom Hooks Patterns

### Server-Side Compatible Hooks
```ts
// ✅ Custom hooks for client components
'use client'
import { useState, useEffect } from 'react'

function useLocalStorage<T>(key: string, initialValue: T) {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : initialValue
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error)
      return initialValue
    }
  })

  const setValue = (value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value
      setStoredValue(valueToStore)

      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore))
      }
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error)
    }
  }

  return [storedValue, setValue] as const
}

// ✅ API hooks with proper error handling
function useApi<T>(url: string) {
  const [data, setData] = useState<T | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true)
        const response = await fetch(url)

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }

        const result = await response.json()
        setData(result)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred')
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [url])

  return { data, loading, error }
}
```

## Testing Patterns

### Component Testing with Vitest

```ts
// ✅ Testing Server Components
import { render, screen } from '@testing-library/react'
import { describe, it, expect, vi, beforeEach } from 'vitest'
import { ProductList } from './product-list'

// Mock the data fetching
vi.mock('./api', () => ({
  getProducts: vi.fn(() => Promise.resolve([
    { id: '1', name: 'Product 1', price: 100 },
    { id: '2', name: 'Product 2', price: 200 },
  ]))
}))

describe('ProductList', () => {
  it('renders product list correctly', async () => {
    render(await ProductList())

    expect(screen.getByText('Product 1')).toBeInTheDocument()
    expect(screen.getByText('Product 2')).toBeInTheDocument()
  })

  it('handles loading state', async () => {
    const { getProducts } = await import('./api')
    vi.mocked(getProducts).mockImplementation(() =>
      new Promise(resolve => setTimeout(() => resolve([]), 100))
    )

    render(await ProductList())
    expect(screen.getByText('Loading...')).toBeInTheDocument()
  })
})

// ✅ Testing Client Components
import { render, screen, fireEvent } from '@testing-library/react'
import { InteractiveButton } from './interactive-button'

describe('InteractiveButton', () => {
  it('handles click events correctly', () => {
    const handleClick = vi.fn()

    render(
      <InteractiveButton onClick={handleClick}>
        Click me
      </InteractiveButton>
    )

    fireEvent.click(screen.getByText('Click me'))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })

  it('applies correct styling based on variant', () => {
    render(
      <InteractiveButton variant="primary">
        Primary Button
      </InteractiveButton>
    )

    const button = screen.getByRole('button')
    expect(button).toHaveClass('bg-primary')
  })
})

// ✅ Testing Custom Hooks
import { renderHook, act } from '@testing-library/react'
import { useLocalStorage } from './use-local-storage'

describe('useLocalStorage', () => {
  beforeEach(() => {
    localStorage.clear()
  })

  it('returns initial value when localStorage is empty', () => {
    const { result } = renderHook(() => useLocalStorage('test-key', 'initial'))

    expect(result.current[0]).toBe('initial')
  })

  it('updates localStorage when value changes', () => {
    const { result } = renderHook(() => useLocalStorage('test-key', 'initial'))

    act(() => {
      result.current]('updated')
    })

    expect(result.current[0]).toBe('updated')
    expect(localStorage.getItem('test-key')).toBe('"updated"')
  })
})

// ✅ Testing Server Actions
import { createUserAction } from './user.action'
import { createMockApiResponse, createMockApiError } from '@/test/setup'

describe('createUserAction', () => {
  it('creates user successfully with valid data', async () => {
    const formData = new FormData()
    formData.append('name', 'John Doe')
    formData.append('email', 'john@example.com')

    const result = await createUserAction({ message: '' }, formData)

    expect(result.success).toBe(true)
    expect(result.data).toMatchObject({
      name: 'John Doe',
      email: 'john@example.com'
    })
  })

  it('returns validation errors for invalid data', async () => {
    const formData = new FormData()
    formData.append('name', '')
    formData.append('email', 'invalid-email')

    const result = await createUserAction({ message: '' }, formData)

    expect(result.success).toBe(false)
    expect(result.fieldErrors).toHaveProperty('name')
    expect(result.fieldErrors).toHaveProperty('email')
  })
})
