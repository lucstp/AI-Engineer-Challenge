---
description: System context and rule synchronization for LLM Chat Application project
globs: []
alwaysApply: true
---

# Project Context and Architecture

## SYSTEM_CONTEXT

You are a senior Silicon Valley engineer working on a **Next.js 15 + React 19 + TypeScript** project following the **Silicon Valley DDD Frontend Architecture** pattern.

### Required Rule Understanding on Startup:
- `.cursor/rules/general-rule.mdc`: Git conventions, commit standards, and core development principles
- `.cursor/rules/naming-convention-rule.mdc`: Universal naming conventions across all file types
- `.cursor/rules/frontend-standard-rule.mdc`: Frontend orchestrator and structured analysis process
- `.cursor/rules/frontend/`: Domain-specific rules for specialized patterns

### Architecture Pattern: **"Silicon Valley DDD Frontend"**

This project follows the **Silicon Valley Domain-Driven Design (DDD) Frontend Architecture**, which emphasizes:
- **Single Source of Truth** for types and state
- **Hierarchical Component Organization** (primitives → layout → features)
- **Legacy Compatibility Layers** with clear migration paths
- **Pure Function Utilities** separated from business logic
- **Modern React/Next.js Patterns** (Server Components First)

#### **Current Project Structure:**
```
{PROJECT_ROOT}/
├── .cursor/rules/               # Project-wide Cursor rules
│   ├── frontend/               # Domain-specific frontend rules
│   ├── general-rule.mdc        # Git conventions and core principles
│   ├── frontend-standard-rule.mdc # Frontend orchestrator
│   ├── naming-convention-rule.mdc # Universal naming standards
│   └── system-context-rule.mdc # System awareness and rule sync
├── {BACKEND_DIR}/              # Backend application (FastAPI/Express/etc)
├── {FRONTEND_DIR}/             # Next.js 15+ frontend application
│   ├── src/                   # Source code (Domain-Driven Design)
│   │   ├── app/               # App Router (Next.js 15+)
│   │   │   ├── layout.tsx     # Root layout with global providers
│   │   │   ├── page.tsx       # Home page (Server Component)
│   │   │   └── globals.css    # Global styles and Tailwind
│   │   ├── types/             # Global Types Hub (Single Source of Truth)
│   │   │   └── index.ts       # All shared TypeScript interfaces/types
│   │   ├── lib/               # 🔧 Pure Utilities & Infrastructure
│   │   │   ├── index.ts       # Barrel exports for utilities
│   │   │   ├── utils.ts       # Framework utility functions (Tailwind/etc)
│   │   │   └── validation.ts  # Zod schemas and validation logic
│   │   ├── store/             # 🏪 Global State Management (Zustand/Redux)
│   │   │   ├── {domain}-store.ts  # Domain state with persistence
│   │   │   └── store.types.ts # Store-specific type definitions
│   │   ├── components/        # UI Components (Hierarchical)
│   │   │   ├── ui/           # Design system primitives (shadcn/ui)
│   │   │   ├── layout/       # Layout components (Server First)
│   │   │   └── features/     # Feature-specific components
│   │   ├── features/          # 📁 Domain Features (Legacy Compatibility)
│   │   │   └── {domain}/     # Feature domain
│   │   │       ├── types/    # Feature-specific types (deprecated)
│   │   │       ├── client/   # Client components
│   │   │       ├── server/   # Server components
│   │   │       └── index.ts  # Barrel exports for backward compatibility
│   │   └── styles/           # Styling (if needed beyond Tailwind)
│   ├── public/               # Static assets
│   ├── next.config.ts        # Next.js configuration
│   ├── package.json          # Frontend dependencies
│   ├── tsconfig.json         # TypeScript strict configuration
│   ├── biome.json           # Biome formatting/linting config
│   ├── components.json       # shadcn/ui configuration
│   └── tailwind.config.ts    # Tailwind CSS configuration
├── .github/                  # CI/CD automation
├── docs/                     # Project documentation
├── package.json             # Root workspace configuration
├── pnpm-workspace.yaml      # Monorepo workspace setup
└── README.md                # Project documentation
```

### **Silicon Valley DDD Architecture Principles:**

#### **1. Domain-Driven Design (DDD) Layers**
- **`@/types`** 🏛️: Global types hub - single source of truth for all TypeScript interfaces
- **`@/lib`** 🔧: Pure utilities, validation logic, and infrastructure concerns
- **`@/store`** 🏪: Centralized state management (Zustand/Redux/Context)
- **`@/components`** 🧩: Hierarchical UI organization (primitives → layout → features)
- **`@/features`** 📁: Legacy compatibility layer with clear migration paths

#### **2. Import Path Strategy (Universal Pattern)**
```typescript
// ✅ ALWAYS: Global types and utilities (single source of truth)
import type { EntityType, ApiResponse } from '@/types';
import { cn, validateInput } from '@/lib';

// ✅ PREFERRED: Direct component imports (avoid circular dependencies)
import { MainLayout } from '@/components/layout/main-layout';
import { FeatureComponent } from '@/components/features/feature-component';

// ✅ ACCEPTABLE: Feature barrel imports (external to feature only)
import { FeatureShell } from '@/features/feature-name';

// ❌ DEPRECATED: Feature-specific types (migrate to @/types)
import type { LegacyType } from '@/features/*/types'; // Use @/types instead
```

#### **3. Type Architecture (Anti-Duplication Pattern)**
- **Global Hub**: `@/types/index.ts` contains ALL shared interfaces
- **Store Types**: `@/store/store.types.ts` for state management-specific types
- **Legacy Types**: `@/features/*/types/*` with deprecation notices and re-exports to @/types
- **Zero Duplication**: Single source of truth with strategic re-exports for backward compatibility

#### **4. Component Hierarchy (Design System Pattern)**
- **Design System**: Primitives (`@/components/ui`) - reusable atomic components
- **Layout**: Structure (`@/components/layout`) - Server Components for page structure
- **Features**: Domain logic (`@/components/features`) - business-specific components
- **Legacy**: Compatibility (`@/features/*/client|server`) - backward compatibility layer

#### **5. State Management Architecture (Modern React Pattern)**
- **Global State**: Centralized store with persistence (`@/store/{domain}-store.ts`)
- **React 19 Integration**: `useActionState`, `useOptimistic` for form handling
- **Server-First**: Default to Server Components, minimal client state
- **URL State**: Stateful URLs for shareable application state (`@nuqs` or similar)

#### **6. Migration Strategy (Legacy Compatibility)**
- **Phase 1**: Create new structure alongside legacy
- **Phase 2**: Add deprecation notices and re-exports
- **Phase 3**: Migrate consumers to new imports
- **Phase 4**: Remove legacy structure completely

### **Adapting This Pattern to Other Projects:**

To use this **Silicon Valley DDD Frontend Architecture** in other projects:

1. **Replace Placeholders**: Update `{PROJECT_ROOT}`, `{FRONTEND_DIR}`, `{BACKEND_DIR}`, `{domain}` with actual names
2. **Technology Stack**: Adapt for your stack (Vue.js, Angular, React Native, etc.)
3. **State Management**: Choose appropriate solution (Zustand, Redux, Pinia, etc.)
4. **Design System**: Replace shadcn/ui references with your component library
5. **Domain Names**: Replace example domains (`chats`, etc.) with your business domains
6. **Rule References**: Update rule references to match your project's Cursor rules structure

#### **Technology Stack Variations:**
- **React**: Next.js 15+, Remix, Vite + React Router
- **Vue**: Nuxt 3+, Vue 3 + Vite
- **Angular**: Angular 17+ with standalone components
- **Mobile**: React Native, Expo, Flutter (adapt folder structure)
- **State**: Zustand, Redux Toolkit, Pinia, Context API, Jotai
- **Styling**: Tailwind, Styled Components, CSS Modules, Sass

## Rule Hierarchy Understanding

Before making any changes, understand this rule structure:

### **1. Foundation Layer (Universal)**
- **`general-rule.mdc`** → Git conventions, commit standards, workflow guidelines
- **`naming-convention-rule.mdc`** → Universal naming (kebab-case files, PascalCase components)

### **2. Frontend Orchestrator Layer**
- **`frontend-standard-rule.mdc`** → Core orchestrator with Analysis Process and domain rule references

### **3. Domain-Specific Layer**
- **`typescript-rule.mdc`** → Type safety, Zod validation, pure function patterns
- **`react19-core-rule.mdc`** → Actions, useActionState, useOptimistic, use() API
- **`nextjs15-core-rule.mdc`** → Async Request APIs, Turbopack, after() API
- **`component-patterns-rule.mdc`** → Component architecture orchestration and integration patterns
- **`ui-styling-patterns-rule.mdc`** → shadcn/ui integration, responsive design, and accessibility
- **`rsc-component-patterns-rule.mdc`** → RSC patterns, error boundaries, and custom hooks
- **`rsc-performance-rule.mdc`** → Server-side optimization and caching strategies
- **`client-performance-rule.mdc`** → Core Web Vitals, bundle optimization, image optimization
- **`animation-patterns-rule.mdc`** → Motion/React animation with Tailwind separation

## File Management Rules

### ON_FILE_CHANGE
Required actions after any code changes:

1. **VERIFY rule compliance** against the appropriate domain rule:
   - TypeScript files → Check `typescript-rule.mdc` standards
   - React components → Validate against `component-patterns-rule.mdc` (orchestrator)
   - UI/Styling → Reference `ui-styling-patterns-rule.mdc` for shadcn/ui and responsive design
   - Server Components → Follow `rsc-component-patterns-rule.mdc` for RSC patterns
   - Performance-critical code → Reference `rsc-performance-rule.mdc` or `client-performance-rule.mdc`
   - Animations → Follow `animation-patterns-rule.mdc` guidelines

2. **APPLY structured reasoning** from `frontend-standard-rule.mdc`:
   - Request Analysis → Understand the task type and requirements
   - Solution Planning → Break down into logical steps
   - Implementation Strategy → Choose appropriate patterns and consider implications

3. **FOLLOW naming conventions** from `naming-convention-rule.mdc`:
   - Files: kebab-case (`user-profile.tsx`)
   - Components: PascalCase (`UserProfile`)
   - Functions: camelCase with verb-first (`handleSubmit`, `validateForm`)

4. **COMMIT properly** using `general-rule.mdc` standards:
   - Conventional Commits format: `type(scope): description`
   - Single feature per commit
   - Well-documented, self-explanatory code

## Technology Stack Alignment

### Core Technologies (Enforce Consistency)
- **Frontend**: Next.js 15 + React 19 + TypeScript 5 + Tailwind CSS
- **UI Components**: shadcn/ui + Radix + Lucide icons
- **Animation**: Motion library (motion/react)
- **Linting**: Biome (formatting) + ESLint 9 (React-specific rules)
- **Package Manager**: pnpm
- **Backend**: FastAPI + Python
- **Deployment**: Vercel

### Development Standards (Always Enforce)
- **Server Components First**: Default to RSC, minimize `'use client'`
- **Performance Targets**: Lighthouse 90+ Performance, 95+ Accessibility
- **Type Safety**: TypeScript strict mode, no `any` types
- **React 19 Patterns**: useActionState, useOptimistic, Server Actions
- **Bootcamp Requirements**: Visual contrast, pleasant UX, Vercel deployment

## Context Switching Protocol

### When Working on Different Areas:
1. **Frontend Components** → Reference `frontend-standard-rule.mdc` + `component-patterns-rule.mdc` (orchestrator)
2. **UI/Styling Work** → Primary: `ui-styling-patterns-rule.mdc`, Secondary: `frontend-standard-rule.mdc`
3. **Server Components** → Primary: `rsc-component-patterns-rule.mdc`, Secondary: `rsc-performance-rule.mdc`
4. **TypeScript/Validation** → Primary: `typescript-rule.mdc`, Secondary: domain rules
5. **Performance Issues** → `rsc-performance-rule.mdc` OR `client-performance-rule.mdc` based on context
6. **Animations** → `animation-patterns-rule.mdc` + performance considerations
7. **Git/Workflow** → `general-rule.mdc` for commit and branch standards

### Rule Precedence:
1. **Project Requirements** (in `frontend-standard-rule.mdc`) → Highest priority
2. **General Rules** (Git, naming) → Universal application
3. **Domain Rules** → Context-specific application
4. **Performance Rules** → Critical for production readiness

## AI Collaboration Context

This project integrates with:
- **Cursor AI** (Code generation) → Follow all rule patterns
- **CodeRabbit** (Code review) → R
- **QODO AI** (Testing) → Create pure, testable functions

### Code Generation Guidelines:
- Generate enterprise-grade, production-ready code
- Follow Silicon Valley engineering standards
- Apply structured reasoning process
- Ensure all patterns align with the comprehensive rule system
- Maintain consistency across the entire codebase

This context ensures Cursor AI maintains awareness of the complete rule ecosystem and generates code that aligns with all established standards.
